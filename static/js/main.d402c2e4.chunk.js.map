{"version":3,"sources":["assets/peopleListeningMusic.png","components/SearchResult.js","components/SongContainer.js","components/Header.js","components/Home.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SearchResult","props","className","library","add","faPlusCircle","faPlayCircle","faPauseCircle","SongContainer","aria-live","role","this","music","map","item","mapIndex","trackName","trackId","artistName","artistViewUrl","artwork","artworkUrl100","collectionName","previewUrl","key","type","src","alt","onClick","audioPlay","audioPlaying","icon","href","id","Component","Header","Home","aria-labelledby","onSubmit","handleSubmit","name","value","checked","userCountry","onChange","handleChange","htmlFor","userInput","placeholder","autoComplete","resultsIsShowing","isLoading","addSong","Footer","App","event","setState","target","validate","state","Swal","fire","title","text","imageUrl","require","imageWidth","imageHeight","imageAlt","preventDefault","jump","duration","offset","callback","undefined","a11y","isHidden","userSearch","getData","audio","document","getElementById","allAudios","querySelectorAll","audioArray","onended","pause","forEach","singleAudio","index","play","resetForm","songTitle","songArtist","songImage","songAudioLink","playlist","selectedSong","selectedArtist","selectedImage","selectedAudioLink","songList","isReset","noResults","noCountry","noOptionSelected","query","location","axios","url","method","responseType","params","term","country","limit","media","then","res","isAudioPlaying","data","results","push","Boolean","window","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d402c2e4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/peopleListeningMusic.072165ae.png\";","import React from 'react';\n\nconst SearchResult = (props) => {\n    return (\n        <div className=\"searchResult\">\n            <h3>Hit the play button and enjoy the preview of your favourite track</h3>\n        </div>\n    )\n}\n\nexport default SearchResult;","import React, { Component } from 'react';\n\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlusCircle, faPlayCircle, faPauseCircle } from '@fortawesome/free-solid-svg-icons';\nlibrary.add(faPlusCircle, faPlayCircle, faPauseCircle)\n\nclass SongContainer extends Component {\n    render() {\n        return (\n            // The values each track needs to have on the result page\n            <div className=\"songContainer\" aria-live=\"polite\" role=\"main\">\n                {this.props.music.map( (item, mapIndex) => {\n                    const { \n                        trackName, \n                        trackId, \n                        artistName, \n                        artistViewUrl, \n                        artworkUrl100: artwork, \n                        collectionName, \n                        previewUrl,\n                    } = item;\n                    // Every single item in the result page\n                    return (\n                        <div className=\"musicItem\" key={trackId}>\n                            <div className=\"image\">\n                                <input className=\"artwork\" type=\"image\" src={artwork} alt={collectionName} onClick={ () => { this.props.audioPlay(mapIndex)}} />\n                                <div onClick={() => { this.props.audioPlay(mapIndex) }} className=\"play\">{this.props.audioPlaying[mapIndex] ? <FontAwesomeIcon icon=\"pause-circle\" /> : <FontAwesomeIcon icon=\"play-circle\" />}</div>\n                            </div>\n\n                            <h3 className=\"trackName\">{trackName}</h3>\n                            <h4 className=\"artist\"><a href={artistViewUrl}>{artistName}</a></h4>\n                            <audio id={mapIndex} src={previewUrl} type=\"audio/m4a\">Your browser does not support the <code>audio</code> element.</audio>\n                        </div>\n                    )\n                })}\n            </div>\n        )\n    }\n}\n\nexport default SongContainer;","import React, { Component } from 'react';\n\nclass Header extends Component {\n    render() {\n        return (\n            <header>\n                <h1 className=\"appTitle\">Soundzy</h1>\n            </header>\n        )\n    }\n}\n\nexport default Header;","import React, { Fragment } from 'react';\nimport SearchResult from './SearchResult';\nimport SongContainer from './SongContainer';\nimport Header from './Header';\n\n    const Home = (props) => {\n\n        return(\n            <Fragment>\n                <div className=\"searchPage\">\n                <Header />\n                    {/* Defining six countries iStores by iTunes store */}\n                    <form className=\"wrapper\" role=\"search\" aria-labelledby=\"search\" onSubmit={props.handleSubmit}>\n                        <div className=\"country\">\n                            <label className=\"select\">Select Your iStore:</label>\n                            <ul className=\"countryInput\">\n                                {/* Unites States Store */}\n                                <li className=\"radio\">\n                                    <input\n                                        className=\"hide\"\n                                        type=\"radio\"\n                                        name=\"userCountry\"\n                                        id=\"us\"\n                                        value=\"US\"\n                                        checked={props.userCountry === 'US'}\n                                        onChange={props.handleChange}\n                                    />\n                                    <label htmlFor=\"us\" className=\"flag unitedStates\"></label>\n                                </li>    \n                                {/* Canada Store */}\n                                <li className=\"radio\">\n                                    <input\n                                        className=\"hide\"\n                                        type=\"radio\"\n                                        name=\"userCountry\"\n                                        id=\"canada\"\n                                        value=\"CA\"\n                                        checked={props.userCountry === 'CA'}\n                                        onChange={props.handleChange}\n                                    />\n                                    <label htmlFor=\"canada\" className=\"flag canada\"></label>\n                                </li>   \n                                {/* Great Britain Store */}\n                                <li className=\"radio\">\n                                    <input\n                                        className=\"hide\"\n                                        type=\"radio\"\n                                        name=\"userCountry\"\n                                        id=\"unitedKingdom\"\n                                        value=\"GB\"\n                                        checked={props.userCountry === 'GB'}\n                                        onChange={props.handleChange}\n                                    />\n                                    <label htmlFor=\"unitedKingdom\" className=\"flag unitedKingdom\"></label>\n                                </li>\n                                {/* France Store */}\n                                <li className=\"radio\">\n                                    <input\n                                        className=\"hide\"\n                                        type=\"radio\"\n                                        name=\"userCountry\"\n                                        id=\"france\"\n                                        value=\"FR\"\n                                        checked={props.userCountry === 'FR'}\n                                        onChange={props.handleChange}\n                                    />\n                                    <label htmlFor=\"france\" className=\"flag france\"></label>\n                                </li>\n                                {/* Spain Store */}\n                                <li className=\"radio\">\n                                    <input\n                                        className=\"hide\"\n                                        type=\"radio\"\n                                        name=\"userCountry\"\n                                        id=\"spain\"\n                                        value=\"ES\"\n                                        checked={props.userCountry === 'ES'}\n                                        onChange={props.handleChange}\n                                    />\n                                    <label htmlFor=\"spain\" className=\"flag spain\"></label>\n                                </li>\n                                {/* Italy Store */}\n                                <li className=\"radio\">\n                                    <input\n                                        className=\"hide\"\n                                        type=\"radio\"\n                                        name=\"userCountry\"\n                                        id=\"italy\"\n                                        value=\"IT\"\n                                        checked={props.userCountry === 'IT'}\n                                        onChange={props.handleChange}\n                                    />\n                                    <label htmlFor=\"italy\" className=\"flag italy\"></label>\n                                </li>\n                                \n                            </ul>\n                        </div>\n                        {/* Search bar letting user to search for their favourite music artist, genre and album */}\n                        <div className=\"userInput\">\n                            <label htmlFor=\"userInput\">Search your favourites and find out your true music personality</label>\n                            <div className=\"searchBar\">\n                                <input \n                                    type=\"text\"\n                                    id=\"userInput\"\n                                    name=\"userInput\"\n                                    value={props.userInput}\n                                    onChange={props.handleChange}\n                                    placeholder=\"Search for Artist, Song, or Genre\"\n                                    autoComplete=\"off\"\n                                />\n                                <input className=\"submitButton\" type=\"submit\" value=\"Search\"/>\n                            </div>\n                        </div>\n                    </form>\n                </div>\n                {/* Displaying the result */}\n                <div className=\"search\" id=\"search\">\n                    <div className=\"wrapper\">\n                        {props.resultsIsShowing && <SearchResult music={props.music} />}\n    \n                        {props.isLoading ? <p>Loading...</p> : <SongContainer music={props.music} addSong={props.addSong} audioPlay={props.audioPlay} audioPlaying={props.audioPlaying} />}\n                    </div>\n                </div>\n            </Fragment>\n        )\n    }\n\nexport default Home;","import React, { Component } from 'react';\n\nclass Footer extends Component {\n    render () {\n        return (\n            <footer>\n                <p className=\"wrapper\">&copy; 2019 Design and code by <a href=\"https://mehdipilehvarian.dev/\">Mehdi Pilehvarian</a></p>\n            </footer>\n        )\n    }\n}\n\nexport default Footer;","import React, { Component, Fragment } from 'react';\nimport './App.css';\n// Sweet Alert library obtained from https://github.com/sweetalert2/sweetalert2\nimport axios from 'axios';\nimport Swal from 'sweetalert2';\nimport Home from './components/Home';\nimport Footer from './components/Footer';\n// Jump slow scroll obtained from http://callmecavs.com/jump.js/\nimport jump from 'jump.js';\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    // To Store the data\n    this.state = {\n      isLoading: false,\n      resultsIsShowing: false,\n      userInput: '',\n      userCountry: '',\n      music: [],\n      songTitle: [],\n      songArtist: [],\n      songImage: [],\n      songAudioLink: [],\n      playlist: [],\n      selectedSong: '',\n      selectedArtist: '',\n      selectedImage: '',\n      selectedAudioLink: '',\n      audioPlaying: [],\n      songList: [],\n      isHidden: true, \n      isReset: true,\n    }\n  }\n\n  // Binding the input, and setting new values in state\n  handleChange = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value\n    })\n  }\n\n  // Validating user's input\n  validate = () => {\n    // When user neither chooses iStore nor fills the search bar\n    if (this.state.userInput === '' && this.state.userCountry === '') {\n      Swal.fire({\n        title: 'Warning',\n        text: `Choose an iStore AND enter a name`,\n        imageUrl: require('./assets/peopleListeningMusic.png'),\n        imageWidth: 500,\n        imageHeight: 300,\n        imageAlt: 'Illustration of people in the subway listening to music',\n      });\n      return false\n    // When user DO NOT chooses the iStore but fills the search bar\n    } else if (this.state.userCountry === '' || !this.state.userInput === null) {\n      Swal.fire({\n        title: 'Warning',\n        text: `You should choose an iStore!!`,\n        imageUrl: require('./assets/peopleListeningMusic.png'),\n        imageWidth: 500,\n        imageHeight: 300,\n        imageAlt: 'Illustration of people in the subway listening to music',\n      });\n      return false\n    // When user chooses the iStore BUT leaves the search bar blank\n    } else if (this.state.userInput === '') {\n      Swal.fire({\n        title: 'Warning',\n        text: `Search for an artist, an album, or a genre!!`,\n        imageUrl: require('./assets/peopleListeningMusic.png'),\n        imageWidth: 500,\n        imageHeight: 300,\n        imageAlt: 'Illustration of people in the subway listening to music',\n      });\n      return false\n    // When user chooses the iStore AND fills the search bar\n    } else {\n      return true;\n    }\n  }\n\n  // On submitting the form, grab user's inputs and make the call to fetch data\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const isValid = this.validate();\n    // If the receiving input from the user is valid the results display\n    if (isValid) {\n      jump('.songContainer', {\n        duration: 1500,\n        offset: 0,\n        callback: undefined,\n        a11y: true\n      });\n      this.setState({\n        userInput: '',\n        isLoading: true,\n        resultsIsShowing: true,\n        isHidden: false\n      })\n      const userCountry = this.state.userCountry;\n      const userSearch = this.state.userInput;\n      this.getData(userSearch, userCountry);\n    }  \n  }\n\n  // Function to play music tracks\n  audioPlay = (mapIndex) => {\n    const audio = document.getElementById(mapIndex);\n    const allAudios = document.querySelectorAll('audio');\n    const audioArray = [...this.state.audioPlaying];\n\n    audio.onended = (event) => {\n      audioArray[mapIndex] = false\n      this.setState({\n        audioPlaying: audioArray\n      })\n    }\n    if (audioArray[mapIndex]) {\n      audioArray[mapIndex] = !audioArray[mapIndex]\n      audio.pause();\n      this.setState({\n        audioPlaying: audioArray\n      })\n    } else {\n      audioArray[mapIndex] = !audioArray[mapIndex]\n      allAudios.forEach((singleAudio, index) => {\n        if (index !== mapIndex) {\n          singleAudio.pause();\n          audioArray[index] = false\n        } \n      })\n      audio.play();\n      this.setState({\n        audioPlaying: audioArray\n      })\n    }\n  }\n\n  // Function to reset the main page inputed info\n  resetForm = () => {\n    this.setState({\n      isLoading: false,\n      resultsIsShowing: false,\n      userInput: '',\n      userCountry: '',\n      music: [],\n      songTitle: [],\n      songArtist: [],\n      songImage: [],\n      songAudioLink: [],\n      playlist: [],\n      selectedSong: '',\n      selectedArtist: '',\n      selectedImage: '',\n      selectedAudioLink: '',\n      audioPlaying: false,\n      songList: [],\n      isHidden: true,\n      isReset: true, \n      noResults: '',\n      noCountry: '',\n      noOptionSelected: ''\n    })\n  }\n\n\n  // Make axios call when the app component mounts to the iTunes store API and store the default data into state\n  // Limiting the results to 10 per request\n  getData = (query, location) => {\n    axios({\n      url: 'https://itunes.apple.com/search',\n      method: 'GET',\n      responseType: 'json',\n      params: {\n        term: query,\n        country: location,\n        limit: 10,\n        media: 'music',\n      }\n    }).then((res) => {\n      const isAudioPlaying = [];\n      const data = res.data.results;\n      const songTitle = data.map((item) => {\n        return item.trackName;\n      });\n      const songArtist = data.map((item) => {\n        return item.artistName;\n      });\n      const songImage = data.map((item) => {\n        return item.artworkUrl100;\n      })\n      const songAudioLink = data.map((item) => {\n        isAudioPlaying.push(false);\n        return item.previewUrl\n      })\n\n      this.setState({\n        music: data,\n        isLoading: false,\n        songTitle: songTitle,\n        songArtist: songArtist,\n        songImage: songImage,\n        songAudioLink: songAudioLink,\n        audioPlaying: isAudioPlaying\n      })\n    })\n  }\n \n  render() {\n\n    const { isLoading, resultsIsShowing, userInput, userCountry, music, audioPlaying, selectedSong, selectedArtist, selectedImage, selectedAudioLink } = this.state\n\n    return (\n          <Fragment>\n            <div className=\"errorMessage wrapper\">\n              {this.state.noResults}\n              {this.state.noCountry}\n              {this.state.noOptionSelected}\n            </div>\n            <Home\n              audioPlaying={audioPlaying}\n              isLoading={isLoading}\n              music={music}\n              resultsIsShowing={resultsIsShowing}\n              selectedSong={selectedSong}\n              selectedArtist={selectedArtist}\n              selectedImage={selectedImage}\n              selectedAudioLink={selectedAudioLink}\n              userInput={userInput}\n              userCountry={userCountry}\n              handleChange={this.handleChange}\n              handleSubmit={this.handleSubmit}\n              addSong={this.addSong}\n              audioPlay={this.audioPlay}\n            />\n          {(!this.state.isHidden) ? <button type=\"reset\" onClick={this.resetForm} className=\"sectionResetButton\">Search Again</button> : null}\n          {this.state.isHidden ? null : <Footer />}\n          </Fragment>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}